class IMateriaSource
{
public:
virtual ~IMateriaSource() {}
virtual void learnMateria(AMateria*) = 0;
virtual AMateria* createMateria(std::string const & type) = 0;
};

class MateriaSource : public IMateriaSource
{
private:
AMateria* materias[4];

public:
MateriaSource() { for (int i = 0; i < 4; i++) materias[i] = nullptr; }
~MateriaSource() { for (int i = 0; i < 4; i++) if (materias[i]) delete materias[i]; }

Copy code
void learnMateria(AMateria* m) {
    for (int i = 0; i < 4; i++) {
        if (!materias[i]) {
            materias[i] = m->clone();
            break;
        }
    }
}
AMateria* createMateria(std::string const & type) {
    for (int i = 0; i < 4; i++) {
        if (materias[i] && materias[i]->getType() == type) {
            return materias[i]->clone();
        }
    }
    return nullptr;
}
};